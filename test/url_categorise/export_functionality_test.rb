require 'test_helper'

class UrlCategorise::ExportFunctionalityTest < Minitest::Test
  def setup
    @temp_dir = Dir.mktmpdir('url_categorise_test')
    @client = UrlCategorise::Client.new(
      cache_dir: @temp_dir,
      host_urls: {
        test_category: ['example.com'],
        malware: ['malicious.com', 'bad.site']
      }
    )
    
    # Mock the hosts data
    @client.instance_variable_set(:@hosts, {
      test_category: ['example.com', 'test.org'],
      malware: ['malicious.com', 'bad.site', 'evil.domain']
    })
    
    # Mock dataset categories
    dataset_categories = Set.new([:test_category])
    @client.instance_variable_set(:@dataset_categories, dataset_categories)
  end

  def teardown
    FileUtils.rm_rf(@temp_dir) if @temp_dir && Dir.exist?(@temp_dir)
  end

  def test_export_hosts_files_with_default_path
    result = @client.export_hosts_files
    
    assert_kind_of Hash, result
    assert result.key?(:_summary)
    assert result.key?(:test_category)
    assert result.key?(:malware)
    
    summary = result[:_summary]
    assert_equal 2, summary[:total_categories]
    assert_equal 5, summary[:total_domains]
    assert summary[:export_directory].include?('exports/hosts')
    
    # Check that files were actually created
    assert File.exist?(summary[:path])
    assert File.exist?(result[:test_category][:path])
    assert File.exist?(result[:malware][:path])
    
    # Check file contents
    test_content = File.read(result[:test_category][:path])
    assert test_content.include?('Test Category - Generated by UrlCategorise')
    assert test_content.include?('0.0.0.0 example.com')
    assert test_content.include?('0.0.0.0 test.org')
    
    malware_content = File.read(result[:malware][:path])
    assert malware_content.include?('Malware - Generated by UrlCategorise')
    assert malware_content.include?('0.0.0.0 malicious.com')
    assert malware_content.include?('0.0.0.0 bad.site')
    assert malware_content.include?('0.0.0.0 evil.domain')
  end

  def test_export_hosts_files_with_custom_path
    custom_path = File.join(@temp_dir, 'custom_export')
    result = @client.export_hosts_files(custom_path)
    
    assert result[:_summary][:export_directory] == custom_path
    assert File.exist?(File.join(custom_path, '_export_summary.txt'))
    assert File.exist?(File.join(custom_path, 'test_category.hosts'))
    assert File.exist?(File.join(custom_path, 'malware.hosts'))
  end

  def test_export_csv_data_with_default_path
    result = @client.export_csv_data
    
    assert_kind_of Hash, result
    assert result.key?(:csv_file)
    assert result.key?(:metadata_file)
    assert result.key?(:summary)
    assert result.key?(:export_directory)
    
    # Check that files were created
    assert File.exist?(result[:csv_file])
    assert File.exist?(result[:metadata_file])
    
    # Check CSV content
    csv_content = File.read(result[:csv_file])
    lines = csv_content.split("\n")
    
    # Should have header + 5 domain entries
    assert_equal 6, lines.length
    assert lines[0].include?('domain,category,source_type')
    assert lines.any? { |line| line.include?('example.com,test_category,dataset') }
    assert lines.any? { |line| line.include?('malicious.com,malware,blocklist') }
    
    # Check metadata
    metadata = JSON.parse(File.read(result[:metadata_file]))
    assert metadata.key?('export_info')
    assert metadata.key?('client_settings')
    assert metadata.key?('data_summary')
    
    assert_equal 5, metadata['data_summary']['total_domains']
    assert_equal 2, metadata['data_summary']['total_categories']
    assert_equal 1, metadata['data_summary']['dataset_categories_count']
    assert_equal 1, metadata['data_summary']['blocklist_categories_count']
  end

  def test_export_csv_data_with_iab_compliance
    @client.iab_compliance_enabled = true
    @client.iab_version = :v3
    
    result = @client.export_csv_data
    
    csv_content = File.read(result[:csv_file])
    assert csv_content.include?('iab_category_v2,iab_category_v3')
  end

  def test_export_csv_data_with_custom_path
    custom_path = File.join(@temp_dir, 'custom_csv_export')
    result = @client.export_csv_data(custom_path)
    
    assert result[:export_directory] == custom_path
    assert File.exist?(result[:csv_file])
    assert File.exist?(result[:metadata_file])
  end

  def test_export_hosts_files_skips_empty_categories
    @client.instance_variable_set(:@hosts, {
      test_category: ['example.com'],
      empty_category: []
    })
    
    result = @client.export_hosts_files
    
    assert result.key?(:test_category)
    refute result.key?(:empty_category)
    assert_equal 1, result[:_summary][:total_categories]
  end

  def test_export_csv_data_includes_dataset_categories
    result = @client.export_csv_data
    
    csv_content = File.read(result[:csv_file])
    
    # Should have dataset entries marked as such
    assert csv_content.include?('test_category,dataset,true')
    assert csv_content.include?('malware,blocklist,false')
  end

  def test_export_hosts_files_creates_summary_file
    result = @client.export_hosts_files
    
    summary_content = File.read(result[:_summary][:path])
    assert summary_content.include?('UrlCategorise Hosts Export Summary')
    assert summary_content.include?('Total categories: 2')
    assert summary_content.include?('Total domains: 5')
    assert summary_content.include?('test_category.hosts - 2 domains')
    assert summary_content.include?('malware.hosts - 3 domains')
  end

  def test_export_csv_metadata_includes_all_required_fields
    result = @client.export_csv_data
    
    metadata = JSON.parse(File.read(result[:metadata_file]))
    
    # Check export_info
    assert metadata['export_info'].key?('timestamp')
    assert metadata['export_info'].key?('filename')
    assert metadata['export_info'].key?('file_path')
    
    # Check client_settings
    assert metadata['client_settings'].key?('iab_compliance_enabled')
    assert metadata['client_settings'].key?('smart_categorization_enabled')
    
    # Check data_summary
    assert metadata['data_summary'].key?('total_domains')
    assert metadata['data_summary'].key?('categories')
    assert_kind_of Array, metadata['data_summary']['categories']
  end
end